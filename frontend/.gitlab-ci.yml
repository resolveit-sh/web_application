stages:
  - build
  - test
  - release
  - deploy
  - notify

variables:
  VERSION: "1.0.${CI_PIPELINE_ID}"

cache:
  key: "${CI_COMMIT_REF_SLUG}"
  paths:
    - frontend/node_modules

# Этап сборки исходников в docker образ с помощью Kaniko
build-frontend:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor --context "${CI_PROJECT_DIR}/frontend" --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile" --destination "${CI_REGISTRY_IMAGE}/sausage-frontend:$CI_COMMIT_SHA" --build-arg VERSION=$VERSION --cache=true

# Тестирование SonarQube для frontend
sonarqube-frontend-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  needs:
    - build-frontend
  script:
    - cd frontend
    - |
      sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONT} \
                    -Dsonar.host.url=${SONAR_HOST_URL} \
                    -Dsonar.login=${SONAR_LOGIN_FRONT} \
                    -Dsonar.sources=. \
                    -Dsonar.exclusions=node_modules/**,dist/**
  rules:
    - changes:
        - frontend/**/*

# Подготовка релиза докер с фронтенд. Добавление тега с помощью Crane
release:
  stage: release
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  cache: []
  script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - crane tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA latest

# Разворачиваем frontend docker-образ на сервер
deploy-frontend:
  stage: deploy
  image: alpine:3.18
  #when: manual # Деплой по кнопке
  script:
    - apk update && apk add gettext openssh-client || true
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - ssh ${DEV_USER}@${DEV_HOST} "mkdir -p /tmp/${CI_PROJECT_DIR}/frontend/"
    - scp ./frontend/default.conf ${DEV_USER}@${DEV_HOST}:/tmp/${CI_PROJECT_DIR}/frontend/default.conf
    - envsubst < ./frontend/deploy.sh | ssh ${DEV_USER}@${DEV_HOST}

# Уведомления в ТГ
telegram-notification-frontend:
  stage: notify
  needs:
    - build-frontend
  script:
    - echo "Отправка уведомления в Telegram Frontend"
    - |
      curl -X POST -H "Content-Type: application/json" \
        --data "{\"chat_id\": \"${TELEGRAM_CHAT_ID}\", \"text\": \"Сборка FRONTEND завершена успешно. Ссылка на артефакты: ${CI_PROJECT_URL}/-/jobs/artifacts/${CI_COMMIT_SHA}/download?job=build-frontend-code-job\"}" \
        "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage"
  rules:
    - changes:
        - frontend/**/*
