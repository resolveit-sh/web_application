# Этапы пайплайна: сборка, тестирование, релиз, деплой, уведомление
stages:
  - build
  - test
  - release
  - deploy
  - notify

# Глобальные переменные
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90

# Кэш для Maven-зависимостей
cache:
  key: "${CI_COMMIT_REF_SLUG}"
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

# Этап сборки исходников в docker образ с помощью Kaniko
build-backend:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - echo "Build backend job has been started"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-backend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true
    # interruptible: true

# Тестирование SonarQube для frontend
sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  needs:
    - build-backend
  script:
    - cd backend
    - |
      mvn verify sonar:sonar \
        -Dsonar.qualitygate.wait=true \
        -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK} \
        -Dsonar.host.url=${SONAR_HOST_URL} \
        -Dsonar.login=${SONAR_LOGIN_BACK}
  rules:
    - changes:
        - backend/**/*

# GitLab SAST анализ, подключаемый через шаблон GitLab
gitlab-sast:
  stage: test
  needs:
    - build-backend
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml
  rules:
    - changes:
        - backend/**/*

# Подготовка релиза. Добавление тега с помощью Crane
release:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  cache: []
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA $VERSION

# Разворачиваем frontend docker-образ на сервер
deploy-backend:
  stage: deploy
  image: alpine:3.18
  # when: manual # Деплой по кнопке
  before_script:
    - apk add --no-cache openssh-client bash gettext
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - envsubst < ./backend/deploy.sh | ssh ${DEV_USER}@${DEV_HOST}

# Уведомления в ТГ
telegram-notification-backend:
  stage: notify
  needs:
    - build-backend
  script:
    - echo "Отправка уведомления в Telegram Backend"
    - |
      curl -X POST -H "Content-Type: application/json" \
        --data "{\"chat_id\": \"${TELEGRAM_CHAT_ID}\", \"text\": \"Сборка BACKEND завершена успешно. Ссылка на артефакты: ${CI_PROJECT_URL}/-/jobs/artifacts/${CI_COMMIT_SHA}/download?job=build-backend-code-job\"}" \
        "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage"
  rules:
    - changes:
        - backend/**/*
